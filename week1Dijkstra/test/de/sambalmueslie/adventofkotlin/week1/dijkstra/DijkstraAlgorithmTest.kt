package de.sambalmueslie.adventofkotlin.week1.dijkstra

import org.junit.jupiter.api.Test
import kotlin.test.assertEquals

/**
 * Date: 27.11.2018 01:01
 */
internal class DijkstraAlgorithmTest {

    @Test
    fun `Markes start and end as part of way`() {
        val mapString = """
        ....................
        .........XS.........
        ....................
        """.trimIndent()

        val marked = """
        ....................
        .........**.........
        ....................
        """.trimIndent()

        val result = DijkstraAlgorithm().addPath(mapString)

        assertEquals(marked, result)
    }

    @Test
    fun `Straight way is straight`() {
        val mapString = """
        ....................
        .....X..........S...
        ....................
        """.trimIndent()

        val marked = """
        ....................
        .....************...
        ....................
        """.trimIndent()

        val result = DijkstraAlgorithm().addPath(mapString)
        assertEquals(marked, result)
    }

    @Test
    fun `Use cross moves`() {
        val mapString = """
        ...........
        .......S...
        ...........
        ...........
        ...........
        ...........
        ..X........
        """.trimIndent()

        val marked = """
        ...........
        .......*...
        ......*....
        .....*.....
        ....*......
        ...*.......
        ..*........
        """.trimIndent()

        val result = DijkstraAlgorithm().addPath(mapString)
        assertEquals(marked, result)
    }

    @Test
    fun `Mark way around wall`() {
        val mapString = """
        ....................
        ......X...B.........
        ..........B.........
        ........BBB....S....
        ....................
        """.trimIndent()

        val marked = """
        .......****.........
        ......*...B*........
        ..........B.*.......
        ........BBB..***....
        ....................
        """.trimIndent()

        val result = DijkstraAlgorithm().addPath(mapString)
        assertEquals(marked, result)
    }

    @Test
    fun `Mark way around wall 2`() {
        val mapString = """
        ..........B.........
        ......X...B.........
        ..........B.........
        ........BBB....S....
        ....................
        """.trimIndent()

        val marked = """
        ..........B.........
        ......*...B.........
        .......*..B.........
        .......*BBB*****....
        ........***.........
        """.trimIndent()

        val result = DijkstraAlgorithm().addPath(mapString)
        assertEquals(marked, result)
    }

    @Test
    fun `Mark way on labirynth`() {
        val mapString = """
        BB..B...B...BBBBB...
        ....B.X.BBB.B...B.B.
        ..BBB.B.B.B.B.B.B.B.
        ....B.BBB.B.B.BS..B.
        BBB.B...B.B.BBBBBBB.
        ..B...B.............
        """.trimIndent()

        val marked = """
        BB..B...B...BBBBB.*.
        ....B.*.BBB.B...B*B*
        ..BBB*B.B.B.B.B.B*B*
        ....B*BBB.B.B.B**.B*
        BBB.B.*.B.B.BBBBBBB*
        ..B...B************.
        """.trimIndent()

        val result = DijkstraAlgorithm().addPath(mapString)
        assertEquals(marked, result)
    }
}